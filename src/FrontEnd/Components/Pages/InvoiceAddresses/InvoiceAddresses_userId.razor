@page "/invoice_addresses/user/{IdString}"
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Requests.InvoiceAddress
@using Contracts.Responses.InvoiceAddress
@using Domain.Exceptions

@inject IInvoiceAddressClient _invoiceAddressClient
@inject NavigationManager _navigationManager

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Invoice addresses</PageTitle>
<div style="display: flex; align-items: center;">
    <h1>InvoiceAddresss</h1>    
    <div style="margin-left: 20px;">
        <button @onclick="AddClick">Add</button>
    </div>
</div>

@if (invoiceAddressList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Company Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>State</th>
                <th>City</th>
                <th>Street</th>
                <th>Id</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var invoiceAddress in invoiceAddressList.InvoiceAddresss)
            {
                <tr>                    
                    <td>@invoiceAddress.CompanyName</td>
                    <td>@invoiceAddress.Email</td>
                    <td>@invoiceAddress.Phone</td>
                    <td>@invoiceAddress.State</td>
                    <td>@invoiceAddress.City</td>
                    <td>@invoiceAddress.Street</td>
                    <td>
                        <NavLink class="nav-link" href="@($"invoice_addresses/{invoiceAddress.Id}")">
                            @invoiceAddress.Id
                        </NavLink>
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private InvoiceAddressListResponse? invoiceAddressList;
    [Parameter]
    public string IdString { get; set; } = string.Empty;

    private Guid _userId;
    private bool _isEditable = false;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(IdString) || !Guid.TryParse(IdString, out _userId))
        {
            throw new NotFoundException("Invalid id format");
        }

        await GetInvoiceAddresss();
    }

    private async Task GetInvoiceAddresss()
    {
        InvoiceAddressGetRequest request = new()
        {
            UserId = _userId
        }; 

        invoiceAddressList = await _invoiceAddressClient.Get(request);
    }

    private void AddClick()
    {
        _navigationManager.NavigateTo($"/invoice_addresses/add", false);
    }
}
