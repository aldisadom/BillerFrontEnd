@page "/invoice_addresses/add"
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Requests.InvoiceAddress
@using Contracts.Responses
@using Contracts.Responses.InvoiceAddress
@using Domain.Exceptions

@inject NavigationManager _navigationManager
@inject IInvoiceAddressClient _invoiceAddressClient

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Invoice address add</PageTitle>

<div style="display: flex; align-items: center;">
    <div style="margin-left: 20px;">
    <button @onclick="AddClick">Add</button>
    </div>      
</div>

<b>UserId:</b>
<br />
<input type="text" @bind="_invoiceAddress.UserId" />
<br />
<b>Company Name:</b>
<br />
<input type="text" @bind="_invoiceAddress.CompanyName" />
<br />
<b>Email:</b>
<br />
<input type="text" @bind="_invoiceAddress.Email" />
<br />
<b>Phone:</b>
<br />
<input type="text" @bind="_invoiceAddress.Phone" />
<br />
<b>State:</b>
<br />
<input type="text" @bind="_invoiceAddress.State" />
<br />
<b>City:</b>
<br />
<input type="text" @bind="_invoiceAddress.City" />
<br />
<b>Street:</b>
<br />
<input type="text" @bind="_invoiceAddress.Street" />

@code {
    private InvoiceAddressAddRequest _invoiceAddress = new();

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task AddClick()
    {
        AddResponse response = await _invoiceAddressClient.Add(_invoiceAddress);
        await _invoiceAddressClient.Get(response.Id);

        _navigationManager.NavigateTo($"/invoice_addresses/{response.Id}", false);
    }
}
