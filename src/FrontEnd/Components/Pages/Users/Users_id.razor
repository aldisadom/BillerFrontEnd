@page "/users/{IdString}"
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Requests.Customer
@using Contracts.Requests.Seller
@using Contracts.Requests.User
@using Contracts.Responses.Customer
@using Contracts.Responses.Seller
@using Contracts.Responses.User
@using Domain.Exceptions
@using Microsoft.AspNetCore.Components.QuickGrid

@inject ISellerClient _sellerClient
@inject IUserClient _userClient
@inject NavigationManager _navigationManager

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>User</PageTitle>
@if (user == null)
{
    <h1>User</h1>
    <p><em>Loading...</em></p>
}
else
{
    <div style="display: flex; align-items: center;">
        <h1>@user!.Name</h1>        
        <div style="margin-left: 20px;">
            <button @onclick="EditClick">Edit</button>
        </div>      
    </div>
    <b>Email:</b>
    <br />
    @user.Email
    <br />
    <b>Name:</b>
    <br />
    @user.Name
    <br />        
    <b>LastName:</b>
    <br />
    @user.LastName    
}
<br />
<div style="display: flex; align-items: center;">
    <h1>Sellers:</h1>
    <div style="margin-left: 20px;">
        <button @onclick="AddSellerClick">Add</button>
    </div>
</div>
@if (sellerList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-header">
        </div>
        <div class="card-body">
            <QuickGrid Items="@sellerQueryable" Pagination="pagination">
                <PropertyColumn Title="Name" Property="@(i => i.CompanyName)" Sortable="true" Align="Align.Left" Class=" country-name">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @onchange="SearchByName" placeholder="Seller name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Title="Company number" Property="@(i => i.CompanyNumber)" Align="Align.Right" />
                <PropertyColumn Title="Email" Property="@(i => i.Email)" Align="Align.Right" />
                <PropertyColumn Title="Phone" Property="@(i => i.Phone)" Align="Align.Right" />
                <PropertyColumn Title="State" Property="@(i => i.State)" Align="Align.Right" />
                <PropertyColumn Title="City" Property="@(i => i.City)" Align="Align.Right" />
                <PropertyColumn Title="Street" Property="@(i => i.Street)" Align="Align.Right" />
                <TemplateColumn Title="Action">
                    <button @onclick="@(() => EditSeller(context))" class="btn btn-info">Edit</button>
                    <button @onclick="@(() => DeleteSeller(context))" class="btn btn-danger">Delete</button>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <div class="card-footer"><Paginator State="@pagination" /></div>
    </div>    
}

@code {
    [Parameter]
    public string IdString { get; set; } = string.Empty;

    private Guid userId;
    private UserResponse? user;

    private SellerListResponse? sellerList;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 50 };
    private IQueryable<SellerResponse> sellerQueryable = Enumerable.Empty<SellerResponse>().AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(IdString) || !Guid.TryParse(IdString, out userId))
        {
            throw new NotFoundException("Invalid id format");
        }

        user = await _userClient.Get(userId);
        await GetSellers();
    }

    private void EditClick()
    {
        _navigationManager.NavigateTo($"/users/update/{IdString}", false);
    }    

    private async Task DeleteClick()
    {
        await _userClient.Delete(userId);
        _navigationManager.NavigateTo("/users", false);
    }

    private async Task GetSellers()
    {
        SellerGetRequest request = new()
            {
                UserId = userId
            };

        sellerList = await _sellerClient.Get(request);
        sellerQueryable = sellerList.Sellers.AsQueryable();
    }

    void SearchByName(ChangeEventArgs e)
    {

    }

    void EditSeller(SellerResponse item)
    {
        _navigationManager.NavigateTo($"/items/{item.Id}", false);
    }

    async Task DeleteSeller(SellerResponse item)
    {
        await _sellerClient.Delete(item.Id);
        await GetSellers();
    }

    private void AddSellerClick()
    {
        _navigationManager.NavigateTo($"/sellers/add?userId={userId}", false);
    }
}
