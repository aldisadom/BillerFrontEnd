@page "/users/{IdString}"
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Requests.Customer
@using Contracts.Requests.Seller
@using Contracts.Requests.User
@using Contracts.Responses.Customer
@using Contracts.Responses.Seller
@using Contracts.Responses.User
@using Domain.Exceptions

@inject ISellerClient _sellerClient
@inject IUserClient _userClient
@inject NavigationManager _navigationManager

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>User</PageTitle>
@if (user == null)
{
    <h1>User</h1>
    <p><em>Loading...</em></p>
}
else
{
    <div style="display: flex; align-items: center;">
        <h1>@user.Name</h1>
        @if (isEditable)
        {
            <div style="margin-left: 20px;">
                <button @onclick="UpdateClick">Update</button>
            </div>
            <div style="margin-left: 20px;">
                <button @onclick="DeleteClick">Delete</button>
            </div>
        }
        else
        {
            <div style="margin-left: 20px;">
                <button @onclick="EditClick">Edit</button>
            </div>            
        }        
    </div>
    @if (isEditable)
    {
        <b>Email:</b>
        <br />
        @user.Email
        <br />
        <b>Name:</b>
        <br />
        <input type="text" @bind="user.Name" />
        <br />
        <b>LastName:</b>
        <br />
        <input type="text" @bind="user.LastName" />
    }
    else
    {
        <b>Email:</b>
        <br />
        @user.Email
        <br />
        <b>Name:</b>
        <br />
        @user.Name
        <br />        
        <b>LastName:</b>
        <br />
        @user.LastName
    }
}
<br />
<h1>Seller list</h1>
@if (sellerList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Company Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>State</th>
                <th>City</th>
                <th>Street</th>
                <th>Id</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var seller in sellerList.Sellers)
            {
                <tr>
                    <td>@seller.CompanyName</td>
                    <td>@seller.Email</td>
                    <td>@seller.Phone</td>
                    <td>@seller.State</td>
                    <td>@seller.City</td>
                    <td>@seller.Street</td>
                    <td>
                        <NavLink class="nav-link" href="@($"sellers/{seller.Id}")">
                            @seller.Id
                        </NavLink>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string IdString { get; set; } = string.Empty;
    private SellerListResponse? sellerList;

    private Guid userId;
    private bool isEditable = false;
    private UserResponse? user;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(IdString) || !Guid.TryParse(IdString, out userId))
        {
            throw new NotFoundException("Invalid id format");
        }

        await Get();
        await GetSellers();
    }

    private async Task Get()
    {
        user = await _userClient.Get(userId);        
    }

    private void EditClick()
    {
        isEditable = true;
    }

    private async Task UpdateClick()
    {
        UserUpdateRequest request = new()
            {
                Id = user!.Id,
                Name = user.Name,
                LastName = user.LastName
            };
        await _userClient.Update(request);

        await Get();
    }

    private async Task DeleteClick()
    {
        await _userClient.Delete(userId);
        _navigationManager.NavigateTo("/users", false);
    }

    private async Task GetSellers()
    {
        SellerGetRequest request = new()
            {
                UserId = userId
            };

        sellerList = await _sellerClient.Get(request);
    }
}
