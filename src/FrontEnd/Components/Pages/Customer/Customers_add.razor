@page "/customers/add"
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Requests.Customer
@using Contracts.Responses
@using Contracts.Responses.Customer
@using Domain.Exceptions

@inject NavigationManager _navigationManager
@inject ICustomerClient _customerClient

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Invoice address add</PageTitle>

<div style="display: flex; align-items: center;">
    <div style="margin-left: 20px;">
    <button @onclick="AddClick">Add</button>
    </div>      
</div>

<b>SellerId:</b>
<br />
<input type="text" @bind="customer.SellerId" />
<br />
<b>Company name:</b>
<br />
<input type="text" @bind="customer.CompanyName" />
<br />
<b>Company number:</b>
<br />
<input type="text" @bind="customer.CompanyNumber" />
<br />
<b>Invoice name:</b>
<br />
<input type="text" @bind="customer.InvoiceName" />
<br />
<b>Email:</b>
<br />
<input type="text" @bind="customer.Email" />
<br />
<b>Phone:</b>
<br />
<input type="text" @bind="customer.Phone" />
<br />
<b>State:</b>
<br />
<input type="text" @bind="customer.State" />
<br />
<b>City:</b>
<br />
<input type="text" @bind="customer.City" />
<br />
<b>Street:</b>
<br />
<input type="text" @bind="customer.Street" />

@code {
    private CustomerAddRequest customer = new();

    [SupplyParameterFromQuery]
    private Guid? sellerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (sellerId is not null)
            customer.SellerId = sellerId.Value;
    }

    private async Task AddClick()
    {
        AddResponse response = await _customerClient.Add(customer);
        
        _navigationManager.NavigateTo($"/customers/{response.Id}", false);
    }
}
