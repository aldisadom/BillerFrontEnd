@page "/customers/{IdString}"
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Requests.Customer
@using Contracts.Requests.Item
@using Contracts.Responses.Customer
@using Contracts.Responses.Item
@using Domain.Exceptions
@using Microsoft.AspNetCore.Components.QuickGrid

@inject NavigationManager _navigationManager
@inject ICustomerClient _customerClient
@inject IItemClient _itemClient

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Customer</PageTitle>
@if (customer == null)
{
    <h1>Customer</h1>
    <p><em>Loading...</em></p>
}
else
{
    <div style="display: flex; align-items: center;">
        <h1>@customer.CompanyName</h1>
        <div style="margin-left: 20px;">
            <button @onclick="EditClick">Edit</button>
        </div>
        <div style="margin-left: 20px;">
            <button @onclick="AddInvoiceClick">Add invoice</button>
        </div>
    </div>
    <b>Company name:</b>
    <br />
    @customer.CompanyName
    <br />
    <b>Company number:</b>
    <br />
    @customer.CompanyNumber
    <br />
    <b>Invoice name:</b>
    <br />
    @customer.InvoiceName
    <br />
    <b>Invoice number:</b>
    <br />
    @customer.InvoiceNumber
    <br />
    <b>Email:</b>
    <br />
    @customer.Email
    <br />
    <b>Phone:</b>
    <br />
    @customer.Phone
    <br />
    <b>State:</b>
    <br />
    @customer.State
    <br />
    <b>City:</b>
    <br />
    @customer.City
    <br />
    <b>Street:</b>
    <br />
    @customer.Street    
}
<br />
<div style="display: flex; align-items: center;">
    <h1>Invoice items:</h1>
    <div style="margin-left: 20px;">
        <button @onclick="AddItemClick">Add</button>
    </div>
</div>
@if (itemList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-header">
        </div>
        <div class="card-body">
            <QuickGrid Items="@itemsQueryable" Pagination="pagination">
                <PropertyColumn Title="Name" Property="@(i => i.Name)" Sortable="true" Align="Align.Left" Class=" country-name">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @onchange="SearchByName" placeholder="Item name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Title="Price" Property="@(i => i.Price)" Align="Align.Right" />
                <PropertyColumn Title="Quantity" Property="@(i => i.Quantity)" Align="Align.Right" />
                <TemplateColumn Title="Action">
                    <button @onclick="@(() => EditItem(context))" class="btn btn-info">Edit</button>
                    <button @onclick="@(() => DeleteItem(context))" class="btn btn-danger">Delete</button>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <div class="card-footer"><Paginator State="@pagination" /></div>
    </div>
}

@code {
    [Parameter]
    public string IdString { get; set; } = string.Empty;
    
    private Guid customerId;
    private CustomerResponse? customer;

    private ItemListResponse? itemList;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 50 };
    private IQueryable<ItemResponse> itemsQueryable = Enumerable.Empty<ItemResponse>().AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(IdString) || !Guid.TryParse(IdString, out customerId))
        {
            throw new NotFoundException("Invalid id format");
        }

        customer = await _customerClient.Get(customerId);
        await GetItems();
    }

    private void EditClick()
    {
        _navigationManager.NavigateTo($"/customers/update/{IdString}", false);
    }

    private async Task DeleteClick()
    {
        await _customerClient.Delete(customerId);
        _navigationManager.NavigateTo("/customers", false);
    }

    private async Task GetItems()
    {
        ItemGetRequest request = new()
            {
                CustomerId = customerId
            };

        itemList = await _itemClient.Get(request);
        itemsQueryable = itemList.Items.AsQueryable();
    }

    void SearchByName(ChangeEventArgs e)
    {

    }

    void EditItem(ItemResponse item)
    {
        _navigationManager.NavigateTo($"/items/{item.Id}", false);
    }

    async Task DeleteItem(ItemResponse item)
    {
        await _itemClient.Delete(item.Id);
        await GetItems();
    }

    private void AddItemClick()
    {
        _navigationManager.NavigateTo($"/items/add?customerId={customerId}", false);
    }

    private void AddInvoiceClick()
    {
        _navigationManager.NavigateTo($"/invoices/add?customerId={customerId}", false);
    }
}
