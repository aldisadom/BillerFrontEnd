@page "/customers/update/{IdString}"
@using AutoMapper
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Requests.Customer
@using Contracts.Requests.Item
@using Contracts.Responses.Customer
@using Contracts.Responses.Item
@using Domain.Exceptions
@using Microsoft.AspNetCore.Components.QuickGrid

@inject NavigationManager _navigationManager
@inject ICustomerClient _customerClient
@inject IItemClient _itemClient
@inject IMapper _mapper

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Customer update</PageTitle>
@if (customerUpdate == null)
{
    <h1>Customer update</h1>
    <p><em>Loading...</em></p>
}
else
{
    <div style="display: flex; align-items: center;">
        <h1>@customerUpdate.CompanyName</h1>
        <div style="margin-left: 20px;">
            <button @onclick="UpdateClick">Update</button>
        </div>
        <div style="margin-left: 20px;">
            <button @onclick="DeleteClick">Delete</button>
        </div>          
    </div>    
    <b>Company name:</b>
    <br />
    <input type="text" @bind="customerUpdate.CompanyName" />
    <br />
    <b>Company number:</b>
    <br />
    <input type="text" @bind="customerUpdate.CompanyNumber" />
    <br />
    <b>Invoice name:</b>
    <br />
    <input type="text" @bind="customerUpdate.InvoiceName" />
    <br />
    <b>Invoice number:</b>
    <br />
    <input type="text" @bind="customerUpdate.InvoiceNumber" />
    <br />
    <b>Email:</b>
    <br />
    <input type="text" @bind="customerUpdate.Email" />
    <br />
    <b>Phone:</b>
    <br />
    <input type="text" @bind="customerUpdate.Phone" />
    <br />
    <b>State:</b>
    <br />
    <input type="text" @bind="customerUpdate.State" />
    <br />
    <b>City:</b>
    <br />
    <input type="text" @bind="customerUpdate.City" />
    <br />
    <b>Street:</b>
    <br />
    <input type="text" @bind="customerUpdate.Street" />
       
}

@code {
    [Parameter]
    public string IdString { get; set; } = string.Empty;
    
    private Guid customerId;
    private CustomerResponse? customer;
    private CustomerUpdateRequest? customerUpdate;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(IdString) || !Guid.TryParse(IdString, out customerId))
        {
            throw new NotFoundException("Invalid id format");
        }

        customer = await _customerClient.Get(customerId);
        customerUpdate = _mapper.Map<CustomerUpdateRequest>(customer);
    }

    private async Task UpdateClick()
    {
        if (customerUpdate == null)
            return;

        await _customerClient.Update(customerUpdate);

        _navigationManager.NavigateTo($"/customers/{customerId}", false);
    }

    private async Task DeleteClick()
    {
        await _customerClient.Delete(customerId);
        _navigationManager.NavigateTo("/customers", false);
    }    
}
