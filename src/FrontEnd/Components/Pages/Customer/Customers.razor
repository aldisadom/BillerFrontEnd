@page "/customers"
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Responses.Customer
@using Microsoft.AspNetCore.Components.QuickGrid

@inject ICustomerClient _customerClient
@inject NavigationManager _navigationManager

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Invoice addresses</PageTitle>
<div style="display: flex; align-items: center;">
    <h1>Customers</h1>    
    <div style="margin-left: 20px;">
        <button @onclick="AddClick">Add</button>
    </div>
</div>

@if (customerList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-header">
                        
        </div>
        <div class="card-body">
            <QuickGrid Items="@CustomersQueryable" Pagination="pagination">                            
                <PropertyColumn Title="Name" Property="@(i => i.CompanyName)" Sortable="true" Align="Align.Left" Class=" country-name">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @onchange="SearchByName" placeholder="Customer name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Title="Company number" Property="@(i => i.CompanyNumber)" Align="Align.Right" />
                <PropertyColumn Title="Invoice name" Property="@(i => i.InvoiceName)" Align="Align.Right" />
                <PropertyColumn Title="Email" Property="@(i => i.Email)" Align="Align.Right" />
                <PropertyColumn Title="Phone" Property="@(i => i.Phone)" Align="Align.Right" />
                <PropertyColumn Title="State" Property="@(i => i.State)" Sortable="true" Align="Align.Right" />
                <PropertyColumn Title="City" Property="@(i => i.City)" Sortable="true" Align="Align.Right" />
                <PropertyColumn Title="Street" Property="@(i => i.Street)" Align="Align.Right" />
                <PropertyColumn Title="Seller id" Property="@(i => i.SellerId)" Align="Align.Left" />
                <TemplateColumn Title="Action">
                    <button @onclick="@(() => Edit(context))" class="btn btn-info">Edit</button>
                    <button @onclick="@(() => Delete(context))" class="btn btn-danger">Delete</button>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <div class="card-footer"><Paginator State="@pagination" /></div>
    </div>
}

@code {
    private CustomerListResponse? customerList;
    PaginationState pagination = new PaginationState { ItemsPerPage = 50 };
    IQueryable<CustomerResponse> CustomersQueryable = Enumerable.Empty<CustomerResponse>().AsQueryable();

    async Task GetData()
    {
        customerList = await _customerClient.Get();
        CustomersQueryable = customerList.Customers.AsQueryable();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }    

    void SearchByName(ChangeEventArgs e)
    {
       
    }

    void Edit(CustomerResponse customer)
    {
        _navigationManager.NavigateTo($"/customers/{customer.Id}", false);
    }

    async Task Delete(CustomerResponse customer)
    {
        await _customerClient.Delete(customer.Id);
        await GetData();
    } 

    private void AddClick()
    {
        _navigationManager.NavigateTo($"/customers/add", false);
    }
}
