@page "/items/{IdString}"
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Requests.Item
@using Contracts.Responses.Item
@using Domain.Exceptions

@inject NavigationManager _navigationManager
@inject IItemClient _itemClient

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Item</PageTitle>
@if (item == null)
{
    <h1>Item</h1>
    <p><em>Loading...</em></p>
}
else
{
    <div style="display: flex; align-items: center;">
        <h1>@item.Name</h1>
        @if (isEditable)
        {
            <div style="margin-left: 20px;">
                <button @onclick="UpdateClick">Update</button>
            </div>
            <div style="margin-left: 20px;">
                <button @onclick="DeleteClick">Delete</button>
            </div>
        }
        else
        {
            <div style="margin-left: 20px;">
                <button @onclick="EditClick">Edit</button>
            </div>            
        }        
    </div>
    @if (isEditable)
    {
        <b>Name:</b>
        <br />
        <input type="text" @bind="item.Name" />
        <br />
        <b>Price:</b>
        <br />
        <input type="number" step="0.01" @bind-value="item.Price" />
        <br />
        <b>Quantity:</b>
        <br />
        <input type="number" step="1" @bind-value="item.Quantity" />
        <br />
    }
    else
    {
        <b>Name:</b>
        <br />
        @item.Name
        <br />
        <b>Price:</b>
        <br />
        @item.Price
        <br />
        <b>Quantity:</b>
        <br />
        @item.Quantity
        <br />
    }
}

@code {
    [Parameter]
    public string IdString { get; set; } = string.Empty;

    private Guid itemId;
    private bool isEditable = false;
    private ItemResponse? item;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(IdString) || !Guid.TryParse(IdString, out itemId))
        {
            throw new NotFoundException("Invalid id format");
        }

        await Get();
    }

    private async Task Get()
    {
        item = await _itemClient.Get(itemId);
    }

    private void EditClick()
    {
        isEditable = true;
    }

    private async Task UpdateClick()
    {
        ItemUpdateRequest request = new()
            {
                Id = item!.Id,
                Name = item.Name,
                Price = item.Price,
                Quantity = item.Quantity

            };
        await _itemClient.Update(request);

        await Get();
    }

    private async Task DeleteClick()
    {
        await _itemClient.Delete(itemId);
        _navigationManager.NavigateTo("/items", false);
    }
}
