@page "/items/update/{IdString}"
@using AutoMapper
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Requests.Item
@using Contracts.Responses.Item
@using Domain.Exceptions

@inject NavigationManager _navigationManager
@inject IItemClient _itemClient
@inject IMapper _mapper

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Item update</PageTitle>
@if (itemUpdate == null)
{
    <h1>Item</h1>
    <p><em>Loading...</em></p>
}
else
{
    <div style="display: flex; align-items: center;">
        <h1>@itemUpdate.Name</h1>
        <div style="margin-left: 20px;">
            <button @onclick="UpdateClick">Update</button>
        </div>
        <div style="margin-left: 20px;">
            <button @onclick="DeleteClick">Delete</button>
        </div>                
    </div>
    <b>Name:</b>
    <br />
    <input type="text" @bind="itemUpdate.Name" />
    <br />
    <b>Price:</b>
    <br />
    <input type="number" step="0.01" @bind-value="itemUpdate.Price" />
    <br />
    <b>Quantity:</b>
    <br />
    <input type="number" step="1" @bind-value="itemUpdate.Quantity" />
    <br />
}

@code {
    [Parameter]
    public string IdString { get; set; } = string.Empty;

    private Guid itemId;
    private ItemResponse? item;
    private ItemUpdateRequest? itemUpdate;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(IdString) || !Guid.TryParse(IdString, out itemId))
        {
            throw new NotFoundException("Invalid id format");
        }

        item = await _itemClient.Get(itemId);
        itemUpdate = _mapper.Map<ItemUpdateRequest>(item);
    }

    private async Task UpdateClick()
    {
        if (itemUpdate == null)
            return;

        await _itemClient.Update(itemUpdate);

        _navigationManager.NavigateTo($"/items/{itemId}", false);
    }

    private async Task DeleteClick()
    {
        await _itemClient.Delete(itemId);
        _navigationManager.NavigateTo("/items", false);
    }
}
