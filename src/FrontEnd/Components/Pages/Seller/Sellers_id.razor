@page "/sellers/{IdString}"
@using Clients.Clients
@using Clients.Interfaces
@using Contracts.Requests.Customer
@using Contracts.Requests.Seller
@using Contracts.Requests.Item
@using Contracts.Responses.Customer
@using Contracts.Responses.Seller
@using Contracts.Responses.Item
@using Domain.Exceptions
@using Microsoft.AspNetCore.Components.QuickGrid

@inject NavigationManager _navigationManager
@inject ISellerClient _sellerClient
@inject ICustomerClient _customerClient

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Seller</PageTitle>
@if (seller == null)
{
    <h1>Seller</h1>
    <p><em>Loading...</em></p>
}
else
{
    <div style="display: flex; align-items: center;">
        <h1>@seller.CompanyName</h1>
        <div style="margin-left: 20px;">
            <button @onclick="EditClick">Edit</button>
        </div>
    </div>
    <b>Company Name:</b>
    <br />
    @seller.CompanyName
    <br />
    <b>Company number:</b>
    <br />
    @seller.CompanyNumber
    <br />
    <b>Email:</b>
    <br />
    @seller.Email
    <br />
    <b>Phone:</b>
    <br />
    @seller.Phone
    <br />
    <b>State:</b>
    <br />
    @seller.State
    <br />
    <b>City:</b>
    <br />
    @seller.City
    <br />
    <b>Street:</b>
    <br />
    @seller.Street
    <br />
    <b>Bank name:</b>
    <br />
    @seller.BankName
    <br />
    <b>Bank number:</b>
    <br />
    @seller.BankNumber
}
<br />
<div style="display: flex; align-items: center;">
    <h1>Clients:</h1>
    <div style="margin-left: 20px;">
        <button @onclick="AddCustomerClick">Add</button>
    </div>
</div>
@if (customerList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-header">
        </div>
        <div class="card-body">
            <QuickGrid Items="@customersQueryable" Pagination="pagination">
                <PropertyColumn Title="Name" Property="@(i => i.CompanyName)" Sortable="true" Align="Align.Left" Class=" country-name">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @onchange="SearchByName" placeholder="Customer name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Title="Company number" Property="@(i => i.CompanyNumber)" Align="Align.Right" />
                <PropertyColumn Title="Invoice name" Property="@(i => i.InvoiceName)" Align="Align.Right" />
                <PropertyColumn Title="Email" Property="@(i => i.Email)" Align="Align.Right" />
                <PropertyColumn Title="Phone" Property="@(i => i.Phone)" Align="Align.Right" />
                <PropertyColumn Title="State" Property="@(i => i.State)" Align="Align.Right" />
                <PropertyColumn Title="City" Property="@(i => i.City)" Align="Align.Right" />
                <PropertyColumn Title="Street" Property="@(i => i.Street)" Align="Align.Right" />
                <TemplateColumn Title="Action">
                    <button @onclick="@(() => EditCustomer(context))" class="btn btn-info">Edit</button>
                    <button @onclick="@(() => DeleteCustomer(context))" class="btn btn-danger">Delete</button>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <div class="card-footer"><Paginator State="@pagination" /></div>
    </div>
}

@code {
    [Parameter]
    public string IdString { get; set; } = string.Empty;
    
    private Guid sellerId;
    private SellerResponse? seller;

    private CustomerListResponse? customerList;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 50 };
    private IQueryable<CustomerResponse> customersQueryable = Enumerable.Empty<CustomerResponse>().AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(IdString) || !Guid.TryParse(IdString, out sellerId))
        {
            throw new NotFoundException("Invalid id format");
        }

        seller = await _sellerClient.Get(sellerId);
        await GetCustomers();
    }

    private void EditClick()
    {
        _navigationManager.NavigateTo($"/sellers/update/{IdString}", false);
    }

    private async Task DeleteClick()
    {
        await _sellerClient.Delete(sellerId);
        _navigationManager.NavigateTo("/sellers", false);
    }

    private async Task GetCustomers()
    {
        CustomerGetRequest request = new()
            {
                SellerId = sellerId
            };

        customerList = await _customerClient.Get(request);
        customersQueryable = customerList.Customers.AsQueryable();
    }

    void SearchByName(ChangeEventArgs e)
    {

    }

    void EditCustomer(CustomerResponse customer)
    {
        _navigationManager.NavigateTo($"/customer/{customer.Id}", false);
    }

    async Task DeleteCustomer(CustomerResponse customer)
    {
        await _customerClient.Delete(customer.Id);
        await GetCustomers();
    }

    private void AddCustomerClick()
    {
        _navigationManager.NavigateTo($"/customers/add?sellerId={sellerId}", false);
    }
}
